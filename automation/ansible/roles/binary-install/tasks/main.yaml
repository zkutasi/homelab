- name: Check if the binary is present
  ansible.builtin.stat:
    path: "{{ bin_path }}/{{ bin_filename }}"
  register: binary_filestat
- name: Check the version of the binary if present
  when: binary_filestat.stat.exists and not binary_filestat.stat.isdir
  check_mode: false
  block:
    - name: Check the version of the binary if present
      ansible.builtin.command:
        cmd: "{{ bin_path }}/{{ bin_filename }} {{ version_flag }}"
      register: binary_installed_version_output
      changed_when: false
    - name: Extract exact version
      ansible.builtin.set_fact:
        binary_installed_version: "{{ (binary_installed_version_output.stdout_lines + binary_installed_version_output.stderr_lines)[0]
          | regex_search('(^|\\s)v?([0-9]+(\\.[0-9]+)+)(\\s|\\+.*|$)', '\\2') | first }}"
    - name: Print out the binary version
      ansible.builtin.debug:
        var: binary_installed_version
- name: Download the given version of binary if not already installed
  when: not binary_filestat.stat.exists or requested_version != binary_installed_version
  notify: Restart the service
  block:
    - name: Debug the input data
      ansible.builtin.debug:
        msg: "Downloading {{ bin_filename }} version {{ requested_version }} from {{ download_url }}"
    - name: Download and extract the binary
      become: true
      ansible.builtin.unarchive:
        src: "{{ download_url }}"
        remote_src: true
        dest: "{{ bin_path }}"
        extra_opts:
          - "--wildcards"
          - "*/{{ bin_filename }}*"
          - "--strip-components=1"
        mode: '0755'
        owner: root
        group: root
      when: compressed
    - name: Download the binary
      become: true
      ansible.builtin.get_url:
        url: "{{ download_url }}"
        dest: "{{ bin_path if destination_path | length == 0 else destination_path }}"
        mode: '0755'
        owner: root
        group: root
      when: not compressed
- name: Create a new Service for the binary if requested
  become: true
  ansible.builtin.template:
    src: service.j2
    dest: "/etc/systemd/system/{{ service_name }}.service"
    mode: '0644'
    owner: root
    group: root
  notify: Restart the service
  when: service_name | length > 0
- name: Start the service
  become: true
  ansible.builtin.systemd_service:
    daemon_reexec: true
    daemon_reload: true
    name: "{{ service_name }}"
    state: started
    enabled: true
  when: service_name | length > 0
