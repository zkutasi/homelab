- name: Check for existing SSH public keys
  ansible.builtin.stat:
    path: "{{ ansible_user_dir }}/.ssh/id_{{ item }}.pub"
  loop: "{{ ssh_key_types }}"
  register: key_files

- name: Find first existing public key
  ansible.builtin.set_fact:
    existing_ssh_key_path: "{{ ansible_user_dir }}/.ssh/id_{{ item.item }}.pub"
  when: item.stat.exists and existing_ssh_key_path is not defined
  loop: "{{ key_files.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Generate SSH key if none found
  ansible.builtin.command: >
    ssh-keygen -t {{ ssh_key_type_to_generate }} -N '' -f {{ ansible_user_dir }}/.ssh/id_{{ ssh_key_type_to_generate }}
  args:
    creates: "{{ ansible_user_dir }}/.ssh/id_{{ ssh_key_type_to_generate }}"
  when: existing_ssh_key_path is not defined

- name: Set existing key path to generated key
  ansible.builtin.set_fact:
    existing_ssh_key_path: "{{ ansible_user_dir }}/.ssh/id_{{ ssh_key_type_to_generate }}.pub"
  when: existing_ssh_key_path is not defined

- name: Read the selected public key
  ansible.builtin.slurp:
    src: "{{ existing_ssh_key_path }}"
  register: slurped_key

- name: Decode public key
  ansible.builtin.set_fact:
    ssh_public_key: "{{ slurped_key.content | b64decode }}"
